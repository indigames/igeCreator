#pragma once

#include <Python.h>

namespace ige::bullet
{
    PyDoc_STRVAR(constraint_doc,
                 "3d physics constraint object\n"
                 "Constructors\n"
                 "-----------\n"
                 "	igeBullet.constraint(type, bodyA,bodyB,pivotA,pivotB,axisA,axisB,frameA,frameB,anchor,useReferenceFrameA,ratio,rotOrder)\n"
                 "	\n"
                 "		Use different arguments for each type.\n"
                 "	\n"
                 "	HINGE_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.HINGE_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB, 	\n"
                 "			useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.HINGE_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, pivotA, pivotB, 	\n"
                 "			axisA, axisB, useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.HINGE_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, frameA, useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.HINGE_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, pivotA, axisA, useReferenceFrameA)	\n"
                 "\n"
                 "	GEAR_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.GEAR_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, axisA, axisB, ratio)	\n"
                 "\n"
                 "	POINT2POINT_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.POINT2POINT_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, pivotA, pivotB)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.POINT2POINT_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, pivotA)	\n"
                 "\n"
                 "	SLIDER_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.SLIDER_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB, 	\n"
                 "			useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.SLIDER_CONSTRAINT_TYPE, 	\n"
                 "			bodyB, frameB, useReferenceFrameA)	\n"
                 "\n"
                 "	D6_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB, 	\n"
                 "			useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_CONSTRAINT_TYPE, 	\n"
                 "			bodyB, frameB, useReferenceFrameA)	\n"
                 "\n"
                 "	CONETWIST_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.CONETWIST_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.CONETWIST_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, frameA)	\n"
                 "\n"
                 "	FIXED_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.FIXED_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB);	\n"
                 "\n"
                 "	D6_SPRING_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_SPRING_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB, 	\n"
                 "			useReferenceFrameA)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_SPRING_CONSTRAINT_TYPE, 	\n"
                 "			bodyB, frameB, useReferenceFrameA)	\n"
                 "\n"
                 "	D6_SPRING_2_CONSTRAINT_TYPE	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_SPRING_2_CONSTRAINT_TYPE, 	\n"
                 "			bodyA, bodyB, frameA, frameB, rotOrder)	\n"
                 "		igeBullet.constraint(	\n"
                 "			igeBullet.D6_SPRING_2_CONSTRAINT_TYPE, 	\n"
                 "			bodyB, frameB, rotOrder)	\n"
                 "Parameters\n"
                 "----------\n"
                 "type : int\n"
                 "	type of constraint\n"
                 "		igeBullet.HINGE_CONSTRAINT_TYPE	\n"
                 "		igeBullet.GEAR_CONSTRAINT_TYPE	\n"
                 "		igeBullet.POINT2POINT_CONSTRAINT_TYPE	\n"
                 "		igeBullet.SLIDER_CONSTRAINT_TYPE	\n"
                 "		igeBullet.D6_CONSTRAINT_TYPE	\n"
                 "		igeBullet.CONETWIST_CONSTRAINT_TYPE	\n"
                 "		igeBullet.FIXED_CONSTRAINT_TYPE	\n"
                 "		igeBullet.D6_SPRING_CONSTRAINT_TYPE	\n"
                 "		igeBullet.D6_SPRING_2_CONSTRAINT_TYPE	\n"
                 "bodyA : igeBullet.rigidBody\n"
                 "bodyB : igeBullet.rigidBody\n"
                 "pivotA : tuple(x,y,z)\n"
                 "pivotB : tuple(x,y,z)\n"
                 "axisA : tuple(x,y,z)\n"
                 "axisB : tuple(x,y,z)\n"
                 "frameA : (position(x,y,z), rotation(x,y,z,w))\n"
                 "frameB : (position(x,y,z), rotation(x,y,z,w))\n"
                 "anchor\n"
                 "useReferenceFrameA\n"
                 "ratio\n"
                 "rotOrder\n"
                 "	igeBullet.RO_XYZ	\n"
                 "	igeBullet.RO_XZY	\n"
                 "	igeBullet.RO_YXZ	\n"
                 "	igeBullet.RO_YZX	\n"
                 "	igeBullet.RO_ZXY	\n"
                 "	igeBullet.RO_ZYX	\n");

    PyDoc_STRVAR(setLimit_doc,
                 "Set the limit of constraint movement\n"
                 "\n"
                 "HINGE_CONSTRAINT_TYPE	\n"
                 "	constraint.setLimit(low, high, _softness, _biasFactor, _relaxationFactor)\n"
                 "\n"
                 "FIXED_CONSTRAINT_TYPE	\n"
                 "D6_CONSTRAINT_TYPE, D6_SPRING_CONSTRAINT_TYPE, D6_SPRING_2_CONSTRAINT_TYPE	\n"
                 "	constraint.setLimit(axis, low, high)\n"
                 "\n"
                 "CONETWIST_CONSTRAINT_TYPE	\n"
                 "	constraint.setLimit(limitIndex, limitValue)	\n"
                 "	constraint.setLimit(_swingSpan1, _swingSpan2, _twistSpan, _softness, _biasFactor, _relaxationFactor)	\n"
                 "GEAR_CONSTRAINT_TYPE, POINT2POINT_CONSTRAINT_TYPE, SLIDER_CONSTRAINT_TYPE	\n"
                 "	No setLimit\n"
                 "\n"
                 "Parameters\n"
                 "----------\n"
                 "	axis : int\n"
                 "		first 3 are linear, next 3 are angular\n"
                 "\n"
                 "	_softness : float\n"
                 "		0->1, recommend ~0.8->1.\n"
                 "		describes % of limits where movement is free.\n"
                 "		beyond this softness %, the limit is gradually enforced until the 'hard' (1.0) limit is reached.\n"
                 "	_biasFactor : float\n"
                 "		0->1?, recommend 0.3 +/-0.3 or so.\n"
                 "		strength with which constraint resists zeroth order (angular, not angular velocity) limit violation.\n"
                 "	 __relaxationFactor : float\n"
                 "		0->1, recommend to stay near 1.\n"
                 "		the lower the value, the less the constraint will fight velocities which violate the angular limits.\n"
                 "\n");
} // namespace ige::bullet
